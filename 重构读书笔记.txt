1:进行重构时，提前准备好测试环境。保证不引入新的bug
2:重构--抽离独立功能到函数里,找出什么是变量
3:重构--修改变量名
4: 重构- 考虑switch修改多个子类继承基类
5:重构的目的是使软件更容易理解和修改。在内部造成很多修改，对外来说基本无变化。
6:将重构和添加新功能独立开，不要一边重构一边添加新功能
7:重构时机--重构不需要一步到位，修改或新增对应的功能或者代码审查时，一点点重构

8:什么是不好的代码？
重复代码、过长函数(寻找注释、条件和循环)、过大的类、过长的参数、适应发散性的变化(改一个功能不需要改几处)、依恋情节（函数对其他类比对自己类更感兴趣）、数据泥团、少于switch


8:代码坏

章节
6:重新组织函数
	提炼函数：区别点在 有无修改局部变量
	内联函数：删除无用的中间层包装
	内联变量：类似上述，删除中间层变量
	以查询(函数接口)来替代临时变量： 忽略性能，对过多的临时变量替代成 函数接口查询,在提炼函数接口之前可先用此原则
	对复杂查询 临时赋值给临时变量： 有时不用此原则，用提炼函数来解决 复杂表达式等
	临时变量多次赋值改用多个临时变量---一个临时变量被多次赋值用作不同的功能，修改为用多个临时变量
	值传递时  取消对参数的赋值修改
	以函数对象代替函数：针对多个参数，将多个参数整合进函数对象里，并通过调用对象的某个方法来提炼
	重新组织函数


7：在对象直接搬移特性
	搬移接口、变量到其他相关类中
	提炼类：一个类做了做个事，将一组功能和变量直接提炼到另外一个类中
	增加委托层： 如获取法宝的铸灵属性，直接在子系统中提供接口获取，而不需要先获取到对应法宝类再获取对应的铸灵属性。  封装一层
	移除委托层： 和上面相反
	引入外部接口、外部类： 对无法修改源码的类来说，增加一个中间层来包装原有类或原有类的接口

8：重新组织数据
	自封装--set/get
	以对象代替一组数据： 坐标x/y字段 改用坐标对象
	将值对象改为引用对象： 书本例子，一个订单包括一个客户，不在订单中生成对象的客户类，值
	界面UI、界面数据独立开--或采用MVC格式，或采用监听模式，数据变化直接更新界面变化
	类之间 单项关联和 双向关联取舍
	以常量代替魔法数
	以子类类代替类型码： 如逍遥情缘实体类，根据类型有玩家宠物等。其实可以拆分成玩家类，宠物类，实体类等等
	状态模式或策略模式 代替 类型码
9：

10:简化函数调用
函数改名：从名字获取函数功能
引入参数对象： 将一组 相关参数 组织成一个参数对象 来传递
查询函数和修改函数分离：
保持对象完整：传递参数时如果有多个参数来自同一对象，为了后续拓展性，直接传递整个对象作为参数
以函数替代参数：  当将函数A结果作为某一个参数 传入另一个函数B，如果函数A结果和参数无关，移除参数在函数B内部调用函数A(尽可能减少无关参数)
移除不用的参数

11:处理继承关系
函数、变量 上移到父类：提取公共的放到子类
函数、变量 下移到子类：和部分子类有关的下移

提炼公共： 将公共接口或变量提炼一起，新加一个父类或接口，并继承它。 或者新加一个对象，通过关联的方式 调用它。  


12:大型重构
.什么是臭代码呢？重复的代码、过长的函数、过大的类、过长参数都是需要重构，当然从改善角度来说，支持拓展 发散性变化、
